<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.palette.h5.ego.dao.EgoMapper">

	<!-- 회원 정보 수정 -->
	<update id="userEdit" parameterType="userinfo">
	update
		userinfo
	set
		 password = #{password}
		, email = #{email}
	where
		id = #{id}	
	</update>

	<!-- Swot분석 글 출력 -->
	<select id="readswot" parameterType="string" resultType="swot">
	select
	*
	from
	swot
	where
	swotId = #{swotId}
	</select>
	
	<!-- Swot분석 글 작성 -->
	<insert id="writeswot" parameterType="swot">
	insert into
			swot
			(
				swotId
				,swotS
				,swotW
				,swotO
				,swotT
			) values (
				#{swotId}
				,#{swotS}
				,#{swotW}
				,#{swotO}
				,#{swotT}
			)
	</insert>
	<!-- Swot분석 글 수정 -->
	<update id="updateswot" parameterType="swot">
	update 
	swot
	set
	swotS=#{swotS}
	,swotW=#{swotW}
	,swotO=#{swotO}
	,swotT=#{swotT}
	where
	swotId = #{swotId}
	
	</update>
	
	<!-- Swot분석 글 삭제 -->
	<delete id="deleteswot" parameterType="string">
	delete
	from
	swot
	where
	swotId = #{swotId}
	</delete>
	
	<!-- HISTORY | HISTORY 전체 데이터 가져오기-->
	<select id="historyDataAll" parameterType="string" resultType="history">
		select
			hisId
			,hisDate
			,hisPeriod
			,hisTitle
			,hisContent
			,hisNo
		from
			history
		where hisId = #{hisId}
	</select>
	
	<!-- HISTORY | HISTORY 연도List 가져오기-->
	<select id="historyYearList" parameterType="string" resultType="string">
		select
			hisDate
		from
			history
		where
			hisId = #{hisId}
	</select>
	
	<!-- HISTORY | HISTORY 데이터 추가하기-->
	<insert id="historyAddOne" parameterType="history">
		insert into
			history
			(
				hisId
				,hisDate
				,hisPeriod
				,hisTitle
				,hisContent
				,hisNo
			) values (
				#{hisId}
				,#{hisDate}
				,#{hisPeriod}
				,#{hisTitle}
				,#{hisContent}
				,history_seq.nextval
			)
	</insert>
	
	<!-- HISTORY | HISTORY 데이터 수정하기-->
	<update id="historyUpdateOne" parameterType="history">
		update
			history
		set
			hisPeriod = #{hisPeriod}
			,hisTitle = #{hisTitle}
			,hisContent = #{hisContent}
		where
			hisId = #{hisId} and hisNo = #{hisNo}
	</update>
	
	<!-- HISTORY | HISTORY 데이터 삭제하기-->
	<delete id="historyDeleteOne" parameterType="history">
		delete
			history
		where
			hisId=#{hisId} and hisNo=#{hisNo}
	</delete>
	
	<!-- 파일 저장 -->
	<insert id="file_management" parameterType="file">
		insert into file_management (
			file_id
			<if test="originalFileName != null and savedFileName != null">
			, originalFileName
			, savedFileName
			</if>
		)
		values (
			file_management_SEQ.nextval
			<if test="originalFileName != null and savedFileName != null">
			, #{originalFileName}
			, #{savedFileName}
			</if>
		)
	</insert>

	<!-- 프로젝트 리스트 입력 -->
	<insert id="projectWrite_One" parameterType="CertProject" >
	
		insert into cert_project(
			proNum
			, proId
			, proTitle			
			, proEdu
			, proTerm
			, proProf
			, proContent
		)
		values(
			cert_project_SEQ.nextval
			, #{proId}
			, #{proTitle}			
			, #{proEdu}
			, #{proTerm}
			, #{proProf}
			, #{proContent}
		)
	
	</insert>
	
	<!-- 프로젝트 리스트 출력 -->
	<select id="projectList" parameterType="String" resultType="CertProject">
	select
		*
	from 
		cert_project 
	where 
		proId = #{proId}
	</select>
	
 	<!-- 프로젝트 디테일 글 하나 출력 -->
 	<select id="projectdetail_One" parameterType="int" resultType="CertProject">
 	select
		* 
	from 
		cert_project 
	where 
		proNum = #{proNum}
 	</select>
 	
 	<!-- 글 수정 -->
	<update id="projectUpdate" parameterType="CertProject">
		update
			cert_project
		set
			proTitle = #{proTitle}
			, proEdu = #{proEdu}
			, proTerm = #{proTerm}
			, proProf = #{proProf}
			, proContent = #{proContent}
		where
			proNum = #{proNum}
			and 
			proId = #{proId}
	</update>
 	
 	<!-- 프로젝트 디테일 글 수정 (입력) 출력-->
 	<!-- <select id="projecDetail_one_one" parameterType="int" resultType="CertProjectDetail">
 	select
 	*
 	from
 	cert_project_detail
 	where
 	proDetailNum = #{proDetailNum}
 	</select> -->
 	
 	<select id="personalityList" resultType="PersonalityList">
 		select 
 			*
 		from
 			personality_list
 	</select>
 	
 	<!-- 자격증명 작성 -->
 	<insert id="certificateWrite" parameterType="Map">
 		insert
 		into
 		CERT_CERTIFICATE
 		(
 		CERTID,
 		CERTJSON,
 		CERTHTML
 		)
 		values
 		(
 		#{certId},
 		#{certjson},
 		#{certhtml}
 		)
 	</insert>
 	
 	<!-- 자격증명 읽기 -->
 	<select id="certificateRead" parameterType="string" resultType="certificate">
 	select
 	*
 	from
 	CERT_CERTIFICATE
 	where
 	CERTID = #{certId}
 	</select>
 	
 	<!-- 자격증명 업데이트 -->
 	<update id="certificateUpdate" parameterType="string">
 	update CERT_CERTIFICATE
 	set
 	CERTJSON = #{certjson},
 	CERTHTML = #{certhtml}
 	where
 	CERTID = #{certId}
 	</update>
</mapper>
